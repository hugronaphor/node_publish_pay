<?php

/**
 * @file
 * Main module file.
 */

define('NODE_PUBLISH_PAY_DEVEL', variable_get('node_publish_pay_devel'));

/**
 * Implements hook_menu().
 */
function node_publish_pay_menu() {
  $items = array();

  // Define an always accessible route to receive IPNs.
  $items['node-publish-pay/ipn'] = array(
    'page callback' => 'node_publish_pay_process_ipn',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['user/%user/properties'] = array(
    'title' => 'Properties',
    'page callback' => 'node_publish_pay_get_properties',
    'page arguments' => array(1),
    'access arguments' => array('allow manage subscription'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/properties'] = array(
    'page callback' => 'node_publish_pay_properties_redirect',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node-publish-pay/%/cancel'] = array(
    'title' => 'Cancel the subscription',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_publish_pay_cancel_confirm_form', 1),
    'access arguments' => array('allow manage subscription'),
    'type' => MENU_CALLBACK,
    'file' => 'node_publish_pay.cancel.inc',
  );

  $items['node-publish-pay/%/publish'] = array(
    'title' => 'Publish the property',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_publish_pay_publish_confirm_form', 1),
    'access arguments' => array('allow publish payable node'),
    'type' => MENU_CALLBACK,
    'file' => 'node_publish_pay.publish.inc',
  );

  $items['admin/config/node_publish_pay'] = array(
    'title' => 'Node Publish Pay',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Configure Node Publish Pay recurring settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('node_publish_pay_admin_form'),
    'access arguments' => array('administer nodes'),
    'file' => 'node_publish_pay.admin.inc',
    'weight' => 5,
  );

  return $items;
}

/**
 * Implements HOOK_views_api().
 */
function node_publish_pay_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'node_publish_pay') . '/includes/views',
  );
}

/**
 * Implements hook_permission().
 *
 * Defines a new permission called 'my custom permission'.
 */
function node_publish_pay_permission() {
  return array(
    'allow publish payable node' => array(
      'title' => t('Allow publish payable node'),
      'description' => t('Allows users to publish the payable nodes.'),
    ),
    'allow manage subscription' => array(
      'title' => t('Allow management of owned property subscription'),
      'description' => t('Allows users to manage their owned property subscription .'),
    ),
  );
}

function node_publish_pay_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // Make sure we are on the node edit/create page.
  if (empty($form['#node_edit_form'])) {
    return;
  }

  // Check if this is a payable CT.
  $content_types = explode(',', variable_get('node_publish_pay_ct', ''));
  if (empty($content_types)) {
    return;
  }

  // Make sure we are on the payable node edit/create page.
  $form_ids = array_map(function ($content_type) {
    return $content_type . '_node_form';
  }, $content_types);

  if (!in_array($form_id, $form_ids)) {
    return;
  }

  // Disable the Publishing options for everyone as publishing needs to happen
  // following the full workflow. Cancelling will happen only when
  // the payment has not a completed status.
  if ($user->uid != 1) {
    $form['options']['#access'] = FALSE;
    $form['options']['status']['#default_value'] = FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function node_publish_pay_theme($existing, $type, $theme, $path) {
  return array(
    'paypal_manager' => array(
      'template' => 'paypal-manager',
      'arguments' => array(
        'vars' => array(
          'nid' => '',
          'paypal_subscribe_info' => '',
          'payment_status' => '',
          'is_payment_completed' => FALSE,
          'publish_link' => '',
          'paypal_host' => '',
        )
      ),
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 *
 * Define the Subscription extra field.
 */
function node_publish_pay_field_extra_fields() {
  $ct = explode(',', variable_get('node_publish_pay_ct', ''));
  foreach ($ct as $content_type) {
    $content_type = trim($content_type);
    $extra['node'][$content_type]['display']['pay_manager'] = [
      'label' => t('PayPal Pay Manager'),
      'description' => t('PayPal Pay Manager.'),
      'weight' => 0,
    ];
  }

  return $extra;
}

/**
 * Implements hook_node_view().
 *
 * Populate the Subscription button field.
 */
function node_publish_pay_node_view($node, $view_mode) {

  $extra_fields = field_extra_fields_get_display('node', $node->type, $view_mode);
  // Add the PayPal button if the node is Unpublished.
  if (empty($node->status) && !empty($extra_fields['pay_manager']['visible'])) {
    $info = variable_get('node_publish_pay_subscribe_info', array('value' => ''));
    $node->content['pay_manager'] = array(
      '#markup' => theme('paypal_manager', array(
        'nid' => $node->nid,
        'paypal_subscribe_info' => nl2br($info['value']),
        'payment_status' => _node_publish_pay_status_info($node->payment_status),
        'is_payment_completed' => ($node->payment_status == 'Completed'),
        'publish_link' => user_access('allow publish payable node') ? l(t('Publish'), "node-publish-pay/$node->nid/publish") : NULL,
        'paypal_host' => NODE_PUBLISH_PAY_DEVEL ? 'https://www.sandbox.paypal.com' : 'https://www.paypal.com',
      ))
    );
  }
}

/**
 * Processes an incoming IPN.
 */
function node_publish_pay_process_ipn($post_array = array(), $debug = FALSE) {
  $ipn = $_POST;

  if (NODE_PUBLISH_PAY_DEVEL && function_exists('dsm')) {
    dsm($ipn, 'Original IPN Log');
    watchdog('node_publish_pay', serialize($ipn), array(), WATCHDOG_NOTICE);
  }

  // Exit now if the $_POST was empty.
  if (empty($ipn)) {
    watchdog('node_publish_pay', 'IPN URL accessed with no POST data submitted.', array(), WATCHDOG_WARNING);
    return FALSE;
  }

  // Make sure this is the expected POST action as we need these data.
  if (empty($ipn['payment_status']) || empty($ipn['subscr_id']) || empty($ipn['txn_id']) || empty($ipn['custom'])) {
    // If this is cancelling notification, allow going further.
    if ($ipn['txn_type'] != 'subscr_cancel') {
      return;
    }
  }

  // Check that the receiver_email is an email address
  // registered in our site.
  if ($ipn['receiver_email'] != variable_get('node_publish_pay_receiver_email', '')) {
    watchdog('node_publish_pay', 'The receiver E-mail: @receiver_email is not a correct one.', array('@receiver_email' => $ipn['receiver_email']), WATCHDOG_NOTICE);
    return FALSE;
  }

  // Check that the currency is correct.
  if ($ipn['mc_currency'] != variable_get('node_publish_pay_currency', '')) {
    watchdog('node_publish_pay', 'The payment currency is not a valid one.', array(), WATCHDOG_NOTICE);
    return FALSE;
  }

  // Prepare an array to POST back to PayPal to validate the IPN.
  $variables = array('cmd=_notify-validate');

  foreach ($ipn as $key => $value) {
    $variables[] = $key . '=' . urlencode($value);
  }

  // Determine the proper PayPal server to POST to.
  if (!empty($ipn['test_ipn']) && $ipn['test_ipn'] == 1) {
    $host = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
  }
  else {
    $host = 'https://www.paypal.com/cgi-bin/webscr';
  }

  // Process the HTTP request to validate the IPN.
  $response = drupal_http_request($host, array(
    'method' => 'POST',
    'data' => implode('&', $variables)
  ));

  // If an error occurred during processing, log the message and exit.
  if (property_exists($response, 'error')) {
    watchdog('node_publish_pay', 'Attempt to validate IPN failed with error @code: @error', array(
      '@code' => $response->code,
      '@error' => $response->error
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // If the IPN was invalid, log a message and exit.
  if ($response->data == 'INVALID') {
    watchdog('node_publish_pay', 'Invalid IPN received and ignored.', array(), WATCHDOG_ALERT);
    return FALSE;
  }

  // txn_id is not available when cancelling the subscription, so using subscr_id.
  if ($ipn['txn_type'] == 'subscr_cancel') {
    $payment_data = node_publish_pay_get_payment_data_by_subscr_id($ipn['subscr_id']);
  }
  else {
    // Exit if the IPN has already been processed.
    $payment_data = node_publish_pay_get_payment_data($ipn['txn_id']);
    if (!empty($ipn['txn_id']) && $payment_data) {
      if ($payment_data['payment_status'] == $ipn['payment_status']) {
        watchdog('node_publish_pay', 'Attempted to process an IPN that has already been processed with transaction ID @txn_id.', array('@txn_id' => $ipn['txn_id']), WATCHDOG_NOTICE);
        return FALSE;
      }
    }
  }

  // Handle the first time payment.
  if (empty($payment_data['nid']) && !empty($ipn['custom'])) {
    $new_nid = $ipn['custom'];
  }
  else {
    watchdog('node_publish_pay', 'The node ID is missing from IPN.', array(), WATCHDOG_NOTICE);
  }

  // If reached here, we can safely update the node Payment data.
  $nid = isset($new_nid) ? $new_nid : $payment_data['nid'];

  $fields = array(
    'payment_status' => $ipn['payment_status'],
    'txn_id' => $ipn['txn_id'],
    'subscr_id' => $ipn['subscr_id'],
  );

  // Fake the Payment status if this is a cancelling request.
  if ($ipn['txn_type'] == 'subscr_cancel') {
    $ipn['payment_status'] = 'canceled';
  }

  // Update the node status only when need to Unpublish as only Admin
  // can publish the node after the review.
  if ($ipn['payment_status'] != 'Completed') {
    $fields['status'] = FALSE;
  }

  // Detect if there is any Ad Type selected.
  $ad_type = !empty($ipn['option_selection1']) ? $ipn['option_selection1'] : FALSE;
  node_publish_pay_update_payment_data($nid, $fields, $ad_type);
}

/**
 * Update the payment data by Node ID.
 *
 * @param int $nid
 *   The Node ID.
 * @param array $values
 *   Node's payment data.
 */
function node_publish_pay_update_payment_data($nid, $values, $ad_type = FALSE) {

  if (empty($values)) {
    return;
  }

  // Allow only specific values(comparing the keys).
  $fields = array_intersect_key($values, array(
    'status' => '',
    'payment_status' => '',
    'txn_id' => '',
    'subscr_id' => ''
  ));

  if (!empty($fields)) {
    try {
      $node = node_load($nid);

      foreach ($fields as $property_name => $value) {
        $node->{$property_name} = $value;
      }

      // Update the node status in a proper way.
      if (isset($fields['status'])) {
        if (!empty($node->nid) && $node->status != $fields['status']) {
          $node->status = $fields['status'];
        }
      }

      // Update the Ad Type reference(unconfirmed field/term names);
      // @todo: Confirm the field and vocabulary names.
      if ($ad_type) {
        $ad_term = taxonomy_get_term_by_name($ad_type, 'partner_options');
        if (!empty($ad_term)) {
          $term = reset($ad_term);
          $node->field_partner_payment_opt[$node->language][0]['tid'] = $term->tid;
        }
      }

      // Save the node.
      node_save($node);

      // Invoke the rules event if possible.
      if (function_exists('rules_invoke_event') && $fields['payment_status'] == 'Completed') {
        $user = user_load($node->uid);
        rules_invoke_event('node_publish_pay_payment_is_completed', $user, $node);
      }
    } catch (\Exception $e) {
      watchdog('node_publish_pay', 'The payment data for node with NID @nid failed to be updated.', array('@nid' => $nid), WATCHDOG_ERROR);
    }
  }
}

/**
 * User's Properties page.
 *
 * @param object $user
 */
function node_publish_pay_get_properties($user) {
  $view = views_get_view('users_properties');
  if (!$view) {
    return;
  }

  $view->set_display('user_properties');
  $view->set_arguments(array($user->uid));
  $view->pre_execute();
  $view->execute();
  return $view->render();
}

/**
 * Redirect to the current "User's Properties" page.
 */
function node_publish_pay_properties_redirect() {
  global $user;

  // Only for registered users.
  if (!empty($user->uid)) {
    drupal_goto('user/' . $user->uid . '/properties');
  }
}

/**
 * Returns a short description of the payment status.
 *
 * @todo: Find out what are the possible statuses as this function is stolen
 *        from commerce_paypal module.
 */
function _node_publish_pay_status_info($status) {
  $status = strtolower($status);
  switch ($status) {
    case 'authorization':
      return t('Authorization pending capture.');
    case 'address':
      return t('Pending unconfirmed address review.');
    case 'echeck':
      return t('eCheck has not yet cleared.');
    case 'intl':
      return t('Pending international transaction review.');
    case 'multi-currency':
      return t('Pending multi-currency review.');
    case 'verify':
      return t('Payment held until your account is verified.');
    case 'completed':
      return t('Payment has been completed.');
    case 'canceled':
      return t('The subscription has been cancelled.');
    case 'other':
      return t('Pending for an unknown reason.');
    default:
      return '';
  }
}

/**
 * Get the payment data by txn_id.
 *
 * @param string $txn_id
 * @return array
 */
function node_publish_pay_get_payment_data($txn_id) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'payment_status'))
    ->condition('n.txn_id', $txn_id);

  $result = $query->execute()->fetchAll();
  return !empty($result) ? (array) reset($result) : array();
}

/**
 * Get the payment data by subscr_id.
 *
 * @param string $subscr_id
 * @return array
 */
function node_publish_pay_get_payment_data_by_subscr_id($subscr_id) {
  $query = db_select('node', 'n')
    ->fields('n', array('nid', 'payment_status'))
    ->condition('n.subscr_id', $subscr_id);

  $result = $query->execute()->fetchAll();
  return !empty($result) ? (array) reset($result) : array();
}
